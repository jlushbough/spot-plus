from flask import Flask, render_template_string
import os
import requests
import openai


app = Flask(__name__)


@app.route("/")
def index():
    """
    Render the home page showing the last played track on Spotify along with
    enriched information generated by an LLM (OpenAI).  
    Tokens for both Spotify and OpenAI are read from environment variables:
    - SPOTIFY_TOKEN: Spotify OAuth token with `user-read-recently-played` scope.
    - OPENAI_API_KEY: OpenAI API key.
    """
    spotify_token = os.getenv("SPOTIFY_TOKEN")
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not spotify_token or not openai_api_key:
        return ("Missing API credentials. Please set SPOTIFY_TOKEN and "
                "OPENAI_API_KEY environment variables.")

    # Fetch the last played track from Spotify
    headers = {"Authorization": f"Bearer {spotify_token}"}
    response = requests.get(
        "https://api.spotify.com/v1/me/player/recently-played?limit=1",
        headers=headers,
        timeout=10,
    )
    if response.status_code != 200:
        return (f"Error fetching last played track: {response.status_code} - "
                f"{response.text}")

    data = response.json()
    items = data.get("items") or []
    if not items:
        return "No recently played tracks found."

    # Extract basic track information
    track_info = items[0]["track"]
    track_name = track_info.get("name", "Unknown")
    artist_name = track_info.get("artists", [{}])[0].get("name", "Unknown")
    album_name = track_info.get("album", {}).get("name", "Unknown")
    track_url = track_info.get("external_urls", {}).get("spotify", "#")

    # Generate enriched description using OpenAI's chat completion
    openai.api_key = openai_api_key
    prompt = (
        f"Provide a short interesting summary about the song '{track_name}' "
        f"by {artist_name}. Include some details about the song's history, "
        f"meaning, or the artist's background."
    )
    try:
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150,
            temperature=0.7,
        )
        summary = completion["choices"][0]["message"]["content"].strip()
    except Exception as err:
        summary = (
            "Unable to generate enriched information due to an error. "
            "Ensure your OpenAI API key is valid and has sufficient quota."
        )

    # Render the results using an inline HTML template
    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Spot Plus</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 40px;
                line-height: 1.6;
            }}
            h1, h2 {{ color: #1DB954; }}
            a {{ color: #1DB954; text-decoration: none; }}
        </style>
    </head>
    <body>
        <h1>Last Played Track</h1>
        <p><strong>Track:</strong> {track_name}</p>
        <p><strong>Artist:</strong> {artist_name}</p>
        <p><strong>Album:</strong> {album_name}</p>
        <p><a href="{track_url}" target="_blank">Listen on Spotify</a></p>
        <h2>Enriched Information</h2>
        <p>{summary}</p>
    </body>
    </html>
    """
    return render_template_string(html)


if __name__ == "__main__":
    # Use PORT environment variable or default to 5000 for local development
    port = int(os.getenv("PORT", "5000"))
    app.run(debug=True, host="0.0.0.0", port=port)